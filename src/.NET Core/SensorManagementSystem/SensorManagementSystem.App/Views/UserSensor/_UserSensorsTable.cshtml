@model PaginatedList<UserSensorTableViewModel>
<input asp-for="PageIndex" hidden value="@Model.PageIndex" readonly />
<input asp-for="HasPreviousPage" hidden value="@Model.HasPreviousPage" readonly />
<input asp-for="HasNextPage" hidden value="@Model.HasNextPage" readonly />

@if (Model.Count == 0)
{
	<div class="text-center">
		<h2>You don't have any registered sensors.</h2>
		<br />
		<h2 class="pb-5">Consider adding one from the mobile application!</h2>
		<br />
	</div>
}
else
{
	<div class="row">
		@{
			for (int i = 0; i < Model.Count; i++)
			{

				string gaugeId = "gauge" + i;

				<div class="col-md-4">
					<!-- Widget: user widget style 1 -->
					<div class="card card-widget widget-user">
						<!-- Add the bg color to the header using any of the bg-* classes -->
						<div class="widget-user-header"
							 style="background: url('lib/AdminLTE/dist/img/sensor-background.jpg') center center;">
							<h3 class="widget-user-username"><strong>@Model[i].Name</strong></h3>
							<h5 class="widget-user-desc">@Model[i].MeasureType</h5>
						</div>
						<div class="widget-user-image">
							<img class="img-circle elevation-2" src="~/lib/AdminLTE/dist/img/sensor-middle.jpg" alt="User Avatar">
						</div>
						<div class="card-footer">
							<div class="card card-outline card-primary collapsed-card">
								<div class="card-header">
									<h3 class="card-title">Description</h3>

									<div class="card-tools">
										<button type="button" class="btn btn-tool" data-card-widget="collapse">
											<i class="fas fa-plus"></i>
										</button>
									</div>
									<!-- /.card-tools -->
								</div>
								<!-- /.card-header -->
								<div class="card-body">
									@Model[i].Description
								</div>
								<!-- /.card-body -->
							</div>
							<div class="card card-outline card-primary">
								<div class="card-header">
									<h3 class="card-title">Real Live gauge view</h3>

									<div class="card-tools">
										<button type="button" class="btn btn-tool" data-card-widget="collapse">
											<i class="fas fa-minus"></i>
										</button>
									</div>
									<!-- /.card-tools -->
								</div>
								<!-- /.card-header -->
								<div class="card-body">
									INSERT GAUGE BAR HERE?
									<div id="@gaugeId"></div>
								</div>
								<!-- /.card-body -->
							</div>
							<div class="row">
								<div class="col-sm-4 border-right">
									@if (Model[i].MinRangeValue.HasValue)
									{
										<div class="description-block">
											<h5 class="description-header">@Model[i].MinRangeValue</h5>
											<span class="description-text">Min Range</span>
										</div>
									}
									<!-- /.description-block -->
								</div>
								<!-- /.col -->
								<div class="col-sm-4 border-right">
									<div class="description-block">
										<div class="description-block">
											<h5 class="description-header">@Model[i].PollingInterval sec</h5>
											<span class="description-text">Polling</span>
										</div>
									</div>
									<!-- /.description-block -->
								</div>
								<!-- /.col -->
								<div class="col-sm-4">
									@if (Model[i].MaxRangeValue.HasValue)
									{
										<div class="description-block">
											<h5 class="description-header">@Model[i].MaxRangeValue</h5>
											<span class="description-text">Max Range</span>
										</div>
									}
									<!-- /.description-block -->
								</div>
								<!-- /.col -->
							</div>
							<div class="row">
								<div class="col-sm-4 border-right">
									<div class="description-block">
										<h5 class="description-header">
											@(Model[i].IsPublic ? "Public" : "Private")
										</h5>
										<span class="description-text">Privacy</span>
									</div>
									<!-- /.description-block -->
								</div>
								<!-- /.col -->
								<div class="col-sm-4 border-right">
									<div class="description-block">
										<h5 class="description-header">
											@(string.Format("{0:0.00}", Model[i].Value)) @(Model[i].IsSwitch ? string.Empty : Model[i].MeasureUnit)
										</h5>
										<span class="description-text">Value</span>
									</div>
									<!-- /.description-block -->
								</div>
								<!-- /.col -->
								<div class="col-sm-4">
									@if (Model[i].UpdatedOn.HasValue)
									{
										<div class="description-block">
											<h5 class="description-header">@Model[i].UpdatedOn.Value.ToString("t")</h5>
											<span class="description-text">Updated On</span>
										</div>
									}
									<!-- /.description-block -->
								</div>
								<!-- /.col -->
							</div>
							<!-- /.row -->
						</div>
					</div>
					<!-- /.widget-user -->
				</div>
			}
		}
		<!-- /.col -->
	</div>
	<!-- /.row -->
}


<script src="~/lib/AdminLTE/plugins//justgage/justgage.js"></script>
<script src="~/lib/AdminLTE/plugins//justgage/raphael-2.1.4.min.js"></script>
@if (Model.Count != 0)
{
<script>
	$().ready(function () {

		function getNonSwitchGaugeOptions(currentValue, minRange, maxRange) {
			return {
				value: currentValue,
				min: minRange,
				max: maxRange,
				gaugeWidthScale: 0.3,
				pointer: true,
				pointerOptions: {
					toplength: -8,
					bottomlength: 8,
					bottomwidth: 10,
					color: '#EE7600',
					stroke: '#808080',
					stroke_width: 1,
					stroke_linecap: 'round'
				},
				levelColors: [
					"#FF0000",
					"#00b200",
					"#FF0000"
				],
				textRenderer: function (val) {
					if (val == null) {
						return 'fetching';
					}
					else if (val >= minRange && val <= maxRange) {
						return val;
					}
				},
				counter: true,
				relativeGaugeSize: true
			};
		}

		function getSwitchGaugeOptions(currentValue) {
			return {
				value: currentValue,
				gaugeWidthScale: 0.5,
				donut: true,
				min: 0,
				max: 1,
				relativeGaugeSize: true,
				gaugeColor: "#FF0000", // false
				levelColors: ["#00b200"], // true
				textRenderer: function (val) {

					if (val == null) {
						return 'fetching';
					}
					else if (val == 0) {
						return 'Off';
					} else if (val == 1) {
						return 'On';
					}
				}
			};
		}

		var firstGaugeInstance = new JustGage({
			id: "gauge0",
			defaults: @Model[0].IsSwitch ? getSwitchGaugeOptions(@Model[0].Value) : getNonSwitchGaugeOptions(@Model[0].Value, @Model[0].MinRangeValue, @Model[0].MaxRangeValue)
		});

		var sensorsCount = parseInt(@Model.Count);
		if (sensorsCount === 2) {
			var secondGaugeInstance = new JustGage({
				id: "gauge1",
				defaults: @Model[1].IsSwitch ? getSwitchGaugeOptions(@Model[1].Value) : getNonSwitchGaugeOptions(@Model[1].Value, @Model[1].MinRangeValue, @Model[1].MaxRangeValue)
			});
		}
		debugger;
		if (sensorsCount === 3) {
			var thirdGaugeInstance = new JustGage({
				id: "gauge2",
				defaults: @Model[2].IsSwitch ? getSwitchGaugeOptions(@Model[2].Value) : getNonSwitchGaugeOptions(@Model[2].Value, @Model[2].MinRangeValue, @Model[2].MaxRangeValue)
			});
		}
	});
</script>
}
