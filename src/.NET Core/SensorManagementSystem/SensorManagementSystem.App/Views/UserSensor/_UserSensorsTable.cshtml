@model PaginatedList<UserSensorTableViewModel>
<input asp-for="PageIndex" hidden value="@Model.PageIndex" readonly />
<input asp-for="HasPreviousPage" hidden value="@Model.HasPreviousPage" readonly />
<input asp-for="HasNextPage" hidden value="@Model.HasNextPage" readonly />
<input id="SensorsCount" hidden value="@Model.Count" readonly />

@if (Model.Count == 0)
{
	<div class="text-center">
		<br />
		<h2>No sensors found matching the filtered condition</h2>
		<br />
		<br />
	</div>
}
else
{
	<input asp-for="MinPollingInterval" hidden value="@Model.MinPollingInterval" readonly />
	if (Model.Count == 1)
	{
		<input id="FirstSensorIsSwitch" hidden value="@Model[0].IsSwitch.ToString()" readonly />
		<input id="FirstSensorValue" hidden value="@Model[0].Value" readonly />
		<input id="FirstSensorPollingInterval" hidden value="@Model[0].PollingInterval" readonly />
		<input id="FirstSensorId" hidden value="@Model[0].Id" readonly />
		if (!Model[0].IsSwitch)
		{
			<input id="FirstSensorMinRange" hidden value="@Model[0].MinRangeValue" readonly />
			<input id="FirstSensorMaxRange" hidden value="@Model[0].MaxRangeValue" readonly />
		}

	}
	if (Model.Count == 2)
	{
		<input id="FirstSensorIsSwitch" hidden value="@Model[0].IsSwitch.ToString()" readonly />
		<input id="FirstSensorValue" hidden value="@Model[0].Value" readonly />
		<input id="FirstSensorPollingInterval" hidden value="@Model[0].PollingInterval" readonly />
		<input id="FirstSensorId" hidden value="@Model[0].Id" readonly />
		if (!Model[0].IsSwitch)
		{
			<input id="FirstSensorMinRange" hidden value="@Model[0].MinRangeValue" readonly />
			<input id="FirstSensorMaxRange" hidden value="@Model[0].MaxRangeValue" readonly />
		}
		<input id="SecondSensorIsSwitch" hidden value="@Model[1].IsSwitch.ToString()" readonly />
		<input id="SecondSensorValue" hidden value="@Model[1].Value" readonly />
		<input id="SecondSensorPollingInterval" hidden value="@Model[1].PollingInterval" readonly />
		<input id="SecondSensorId" hidden value="@Model[1].Id" readonly />
		if (!Model[1].IsSwitch)
		{
			<input id="SecondSensorMinRange" hidden value="@Model[1].MinRangeValue" readonly />
			<input id="SecondSensorMaxRange" hidden value="@Model[1].MaxRangeValue" readonly />
		}

	}
	if (Model.Count == 3)
	{
		<input id="FirstSensorIsSwitch" hidden value="@Model[0].IsSwitch.ToString()" readonly />
		<input id="FirstSensorValue" hidden value="@Model[0].Value" readonly />
		<input id="FirstSensorPollingInterval" hidden value="@Model[0].PollingInterval" readonly />
		<input id="FirstSensorId" hidden value="@Model[0].Id" readonly />
		if (!Model[0].IsSwitch)
		{
			<input id="FirstSensorMinRange" hidden value="@Model[0].MinRangeValue" readonly />
			<input id="FirstSensorMaxRange" hidden value="@Model[0].MaxRangeValue" readonly />
		}
		<input id="SecondSensorIsSwitch" hidden value="@Model[1].IsSwitch.ToString()" readonly />
		<input id="SecondSensorValue" hidden value="@Model[1].Value" readonly />
		<input id="SecondSensorPollingInterval" hidden value="@Model[1].PollingInterval" readonly />
		<input id="SecondSensorId" hidden value="@Model[1].Id" readonly />
		if (!Model[1].IsSwitch)
		{
			<input id="SecondSensorMinRange" hidden value="@Model[1].MinRangeValue" readonly />
			<input id="SecondSensorMaxRange" hidden value="@Model[1].MaxRangeValue" readonly />
		}
		<input id="ThirdSensorIsSwitch" hidden value="@Model[2].IsSwitch.ToString()" readonly />
		<input id="ThirdSensorValue" hidden value="@Model[2].Value" readonly />
		<input id="ThirdSensorPollingInterval" hidden value="@Model[2].PollingInterval" readonly />
		<input id="ThirdSensorId" hidden value="@Model[2].Id" readonly />
		if (!Model[2].IsSwitch)
		{
			<input id="ThirdSensorMinRange" hidden value="@Model[2].MinRangeValue" readonly />
			<input id="ThirdSensorMaxRange" hidden value="@Model[2].MaxRangeValue" readonly />
		}
	}
	<div class="row">
		@{
			for (int i = 0; i < Model.Count; i++)
			{

				string gaugeId = "gauge" + i;

				<div class="col-md-4">
					<!-- Widget: user widget style 1 -->
					<div class="card card-widget widget-user">
						<!-- Add the bg color to the header using any of the bg-* classes -->
						<div class="widget-user-header"
							 style="background: url('lib/AdminLTE/dist/img/sensor-background.jpg') center center;">
							<h3 class="widget-user-username"><strong>@Model[i].Name</strong></h3>
							<h5 class="widget-user-desc">@Model[i].MeasureType</h5>
						</div>
						<div class="widget-user-image">
							<img class="img-circle elevation-2" src="~/lib/AdminLTE/dist/img/sensor-middle.jpg" alt="User Avatar">
						</div>
						<div class="card-footer">
							<div class="card card-outline card-primary collapsed-card">
								<div class="card-header">
									<h3 class="card-title">Description</h3>

									<div class="card-tools">
										<button type="button" class="btn btn-tool" data-card-widget="collapse">
											<i class="fas fa-plus"></i>
										</button>
									</div>
									<!-- /.card-tools -->
								</div>
								<!-- /.card-header -->
								<div class="card-body">
									@Model[i].Description
								</div>
								<!-- /.card-body -->
							</div>
							<div class="card card-outline card-success">
								<div class="card-header">
									<h3 class="card-title">Real Live gauge view</h3>

									<div class="card-tools">
										<button type="button" class="btn btn-tool" data-card-widget="collapse">
											<i class="fas fa-minus"></i>
										</button>
									</div>
									<!-- /.card-tools -->
								</div>
								<!-- /.card-header -->
								<div class="card-body">
									<h4 class="text-center">Measure type: @Model[i].MeasureUnit</h4>
									<div id="@gaugeId"></div>
								</div>
								<!-- /.card-body -->
							</div>
							<div class="card card-outline card-danger collapsed-card">
								<div class="card-header">
									<h3 class="card-title">Actions</h3>

									<div class="card-tools">
										<button type="button" class="btn btn-tool" data-card-widget="collapse">
											<i class="fas fa-plus"></i>
										</button>
									</div>
									<!-- /.card-tools -->
								</div>
								<!-- /.card-header -->
								<div class="card-body">
									<a asp-area="" asp-controller="UserSensor" asp-action="Edit" asp-route-id="@Model[i].Id"
									   class="btn btn-block btn-outline-warning">
										Edit
									</a>
									<hr />
									<form method="post"
										  asp-area="" asp-controller="UserSensor" asp-action="Delete" asp-route-id="@Model[i].Id">
										<button type="submit" class="btn btn-block btn-outline-danger">Delete</button>
									</form>
								</div>
								<!-- /.card-body -->
							</div>
							<div class="row">
								@{
									string colSize = Model[i].IsAlarmOn.HasValue ? "col-sm-4" : "col-sm-6";
								}
								<div class="@colSize border-right">
									<div class="description-block">
										<h5 class="description-header">
											@(Model[i].IsPublic ? "Public" : "Private")
										</h5>
										<span class="description-text">Privacy</span>
									</div>
									<!-- /.description-block -->
								</div>
								<!-- /.col -->
								<div class="@colSize border-right">
									<div class="description-block">
										<div class="description-block">
											<h5 class="description-header">@Model[i].PollingInterval sec</h5>
											<span class="description-text">Polling</span>
										</div>
									</div>
									<!-- /.description-block -->
								</div>
								<!-- /.col -->
								@if (Model[i].IsAlarmOn.HasValue)
								{
									<div class="@colSize">

										<div class="description-block">
											<h5 class="description-header">@(Model[i].IsAlarmOn.Value ? "Active" : "Not Active")</h5>
											<span class="description-text">Alarm</span>
										</div>
										<!-- /.description-block -->
									</div>
								}
								<!-- /.col -->
							</div>
						</div>
					</div>
					<!-- /.widget-user -->
				</div>
			}
		}
		<!-- /.col -->
	</div>
	<!-- /.row -->
}
