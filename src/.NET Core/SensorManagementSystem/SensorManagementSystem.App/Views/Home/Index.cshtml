@model HomeIndexViewModel

@{
	string colSize = User.Identity.IsAuthenticated ? "col-lg-3" : "col-lg-4";
}
<div class="row">
	<div class="@colSize col-6">
		<!-- small card -->
		<div class="small-box bg-info">
			<div class="inner">
				<h3>@Model.SensorsInStoreCount</h3>

				<p>Sensors in Store</p>
			</div>
			<div class="icon">
				<i class="fas fa-shopping-cart"></i>
			</div>
			<a asp-area="" asp-controller="SensorStore" asp-action="Index" class="small-box-footer">
				Go to store&nbsp;<i class="fas fa-arrow-circle-right"></i>
			</a>
		</div>
	</div>
	<!-- ./col -->
	<div class="@colSize col-6">
		<!-- small card -->
		<div class="small-box bg-success">
			<div class="inner">
				<h3>@Model.PublicUserSensorsCount</h3>

				<p>Public User Sensors</p>
			</div>
			<div class="icon">
				<i class="fas fa-stream"></i>
			</div>
			<a id="scrollToMap" href="#homeIndexMap" class="small-box-footer">
				View on map&nbsp;<i class="fas fa-arrow-circle-right"></i>
			</a>
		</div>
	</div>
	<!-- ./col -->
	<div class="@colSize col-6">
		<!-- small card -->
		<div class="small-box bg-warning">
			<div class="inner">
				<h3>@Model.UsersCount</h3>

				<p>User Registrations</p>
			</div>
			<div class="icon">
				<i class="fas fa-user-plus"></i>
			</div>
			@if (!User.Identity.IsAuthenticated)
			{
				<a asp-area="Identity" asp-page="/Account/Register" class="small-box-footer">
					Register now&nbsp;<i class="fas fa-arrow-circle-right"></i>
				</a>
			}
			else
			{
				<a href="#" class="small-box-footer">
					Already Registered&nbsp;<i class="fas fa-arrow-circle-right"></i>
				</a>
			}
		</div>
	</div>
	<!-- ./col -->
	@if (User.Identity.IsAuthenticated)
	{
		<div class="@colSize col-6">
			<!-- small card -->
			<div class="small-box bg-danger">
				<div class="inner">
					<h3>@Model.AuthenticatedUserSensorsCount.Value</h3>

					<p>Sensors bought</p>
				</div>
				<div class="icon">
					<i class="fas fa-chart-pie"></i>
				</div>
				<a asp-area="" asp-controller="UserSensor" asp-action="Index" class="small-box-footer">
					Check out sensors&nbsp;<i class="fas fa-arrow-circle-right"></i>
				</a>
			</div>
		</div>
	}
	<!-- ./col -->
</div>
<!-- /.row -->

<div class="col-md-12">
	<div class="card card-primary card-outline">
		<div class="card-header">
			<h3 class="card-title">View User Sensors on map</h3>
			<div class="card-tools">
				<button type="button" class="btn btn-tool" data-card-widget="maximize"><i class="fas fa-expand"></i></button>
				<button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-minus"></i></button>
			</div>
			<!-- /.card-tools -->
		</div>
		<!-- /.card-header -->
		<div class="card-body">
			<div id="map"></div>
		</div>
		<!-- /.card-body -->
	</div>
	<!-- /.card -->
</div>

<script>

	function initMap() {

		//The center location of our map.
		var centerOfMap = new google.maps.LatLng(42.654331, 23.353332);

		//Map options.
		var options = {
			center: centerOfMap, //Set center.
			zoom: 15 //The zoom value.
		};

		//Create the map object.
		map = new google.maps.Map(document.getElementById('map'), options);



		// Add some markers to the map.
		// Note: The code uses the JavaScript Array.prototype.map() method to
		// create an array of markers based on a given "locations" array.
		// The map() method here has nothing to do with the Google Maps API.
		var markers = locations.map(function (location, i) {
			return new google.maps.Marker({
				position: location,
				label: labels[i % labels.length]
			});
		});

		// Add a marker clusterer to manage the markers.
		var markerCluster = new MarkerClusterer(map, markers,
			{ imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' });
	}
	var locations = [
		{ lat: -31.563910, lng: 147.154312 },
		{ lat: -33.718234, lng: 150.363181 },
		{ lat: -33.727111, lng: 150.371124 },
		{ lat: -33.848588, lng: 151.209834 },
		{ lat: -33.851702, lng: 151.216968 },
		{ lat: -34.671264, lng: 150.863657 },
		{ lat: -35.304724, lng: 148.662905 },
		{ lat: -36.817685, lng: 175.699196 },
		{ lat: -36.828611, lng: 175.790222 },
		{ lat: -37.750000, lng: 145.116667 },
		{ lat: -37.759859, lng: 145.128708 },
		{ lat: -37.765015, lng: 145.133858 },
		{ lat: -37.770104, lng: 145.143299 },
		{ lat: -37.773700, lng: 145.145187 },
		{ lat: -37.774785, lng: 145.137978 },
		{ lat: -37.819616, lng: 144.968119 },
		{ lat: -38.330766, lng: 144.695692 },
		{ lat: -39.927193, lng: 175.053218 },
		{ lat: -41.330162, lng: 174.865694 },
		{ lat: -42.734358, lng: 147.439506 },
		{ lat: -42.734358, lng: 147.501315 },
		{ lat: -42.735258, lng: 147.438000 },
		{ lat: -43.999792, lng: 170.463352 }
	]
</script>
<script async defer
		src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCVyS3NJhTM9WQKFDOkEkzlds-fU_HsuMM&callback=initMap">
</script>
<script src="~/lib/AdminLTE/plugins/markerclusterer/markerclusterer.js"></script>
@*<script>
	let gm_map;
	// Initialize and add the map
	function initMap() {

		const options_googlemaps = {
			minZoom: 4,
			zoom: 11,
			center: new google.maps.LatLng(42.654331, 23.353332),
			maxZoom: 18,
			mapTypeId: google.maps.MapTypeId.ROADMAP,
			streetViewControl: false,
			styles: [
				{ elementType: 'geometry', stylers: [{ color: '#242f3e' }] },
				{ elementType: 'labels.text.stroke', stylers: [{ color: '#242f3e' }] },
				{ elementType: 'labels.text.fill', stylers: [{ color: '#746855' }] },
				{
					featureType: 'administrative.locality',
					elementType: 'labels.text.fill',
					stylers: [{ color: '#d59563' }]
				},
				{
					featureType: 'poi',
					elementType: 'labels.text.fill',
					stylers: [{ color: '#d59563' }]
				},
				{
					featureType: 'poi.park',
					elementType: 'geometry',
					stylers: [{ color: '#263c3f' }]
				},
				{
					featureType: 'poi.park',
					elementType: 'labels.text.fill',
					stylers: [{ color: '#6b9a76' }]
				},
				{
					featureType: 'road',
					elementType: 'geometry',
					stylers: [{ color: '#38414e' }]
				},
				{
					featureType: 'road',
					elementType: 'geometry.stroke',
					stylers: [{ color: '#212a37' }]
				},
				{
					featureType: 'road',
					elementType: 'labels.text.fill',
					stylers: [{ color: '#9ca5b3' }]
				},
				{
					featureType: 'road.highway',
					elementType: 'geometry',
					stylers: [{ color: '#746855' }]
				},
				{
					featureType: 'road.highway',
					elementType: 'geometry.stroke',
					stylers: [{ color: '#1f2835' }]
				},
				{
					featureType: 'road.highway',
					elementType: 'labels.text.fill',
					stylers: [{ color: '#f3d19c' }]
				},
				{
					featureType: 'transit',
					elementType: 'geometry',
					stylers: [{ color: '#2f3948' }]
				},
				{
					featureType: 'transit.station',
					elementType: 'labels.text.fill',
					stylers: [{ color: '#d59563' }]
				},
				{
					featureType: 'poi.business',
					stylers: [{ visibility: 'off' }]
				},
				{
					featureType: 'transit',
					elementType: 'labels.icon',
					stylers: [{ visibility: 'off' }]
				},
				{
					featureType: 'water',
					elementType: 'geometry',
					stylers: [{ color: '#17263c' }]
				},
				{
					featureType: 'water',
					elementType: 'labels.text.fill',
					stylers: [{ color: '#515c6d' }]
				},
				{
					featureType: 'water',
					elementType: 'labels.text.stroke',
					stylers: [{ color: '#17263c' }]
				}
			]
		}

		gm_map = new google.maps.Map(document.getElementById('homeIndexMap'), options_googlemaps)

		let markers = [];
		let infoWindows = [];
		const privateSensorIconUrl = 'http://maps.google.com/mapfiles/kml/pushpin/red-pushpin.png';
		const ownPublicSensorIconUrl = 'http://maps.google.com/mapfiles/kml/pushpin/grn-pushpin.png';

		$.getJSON("/Home/GetUserSensorCoordinates", function (data) {

			for (let i = 0; i < data.length; i++) {
				let latLng = new google.maps.LatLng(data[i].latitude,
					data[i].longitude);

				markers[i] = new google.maps.Marker({
					position: latLng,
					map: gm_map,
					animation: google.maps.Animation.DROP,
					icon: '/images/map-marker.png'
				});

				let formattedDate = data[i].createdOn.replace(/(\d{4})\-(\d{2})\-(\d{2}).*/, '$3-$2-$1');
				//console.log(formatDate)
				let contentString =
					'<p>Name: ' + '<span class="h6 text-primary">' + data[i].name + '</span></p>' +
					'<p>Created on: <span class=" text-danger">' + formattedDate + '</span></p>' +
					'<p>Sensor type: <span class="h6 text-warning">' + data[i].measureType + '</span></p>';

				let loggedInUserId = '@this.User.GetId()';
				let isCurrentUserSensor = loggedInUserId === data[i].userId;

				if (isCurrentUserSensor) {
					//add sensor details url if owner?
					markers[i].setAnimation(google.maps.Animation.BOUNCE);
					markers[i].addListener('click', function() {
						if (markers[i].getAnimation() !== null) {
							markers[i].setAnimation(null);
						} else {
							markers[i].setAnimation(google.maps.Animation.BOUNCE);
						}
					});

					if (!data[i].isPublic) {
						markers[i].setIcon(privateSensorIconUrl);
						contentString += '<p>Status: <span class="h6 text-danger"> Private <i class="fas fa-user-secret"></i></span></p>';
					} else {
						markers[i].setIcon(ownPublicSensorIconUrl);
						contentString += '<p>Status: <span class="h6 text-success"> Public <i class="fas fa-globe-americas"></i></span></p>';
					}
				}
				else {
					contentString += '<p>Status: <span class="h6 text-success"> Public <i class="fas fa-globe-americas"></i></span></p>';
				}

				infoWindows[i] = new google.maps.InfoWindow({
					content: contentString
				});

				markers[i].addListener('mouseover', function () {
					infoWindows[i].open(gm_map, markers[i]);
				});

				markers[i].addListener('mouseout', function () {
					infoWindows[i].close();
				});
			}

			let markerCluster = new MarkerClusterer(gm_map, markers);
		});
	}
	</script>*@
